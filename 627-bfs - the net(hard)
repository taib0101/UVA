        Allahu Akber............
   #include<bits/stdc++.h>
using namespace std;
vector < int > vec[400];
vector < int > vv;
bool vis[400] = {0} , bo;
int dis[400], coun, cou;
map < int , map < int , vector < int > > > mmv;
map < int , int > mmp;//coun and element;
map < int , int > :: iterator it;
void bfs(int x,int y)
{
   dis[x] = 0;
   vis[x] = 1;
   mmv[x][coun].push_back(x);
   mmp[x] = coun;
   queue < int > que;
   que.push(x);

   while(!que.empty() && !bo)
   {
       int node = que.front();
       que.pop();
       coun = 0;
       for(int i = 0; i < vec[node].size(); ++i)
       {
           int next = vec[node][i];
           if(!vis[next])
           {
               vis[next] = 1;
               dis[next] = dis[node] + 1;
               it = mmp.find(node);
//               cout <<  "next = " << next  << ",node  = " << it->first << ", dis = " << dis[node] << ",node coun = " << it->second << endl;
               mmv[next][++coun] = mmv[node][it->second];
               mmv[next][coun].push_back(next);
               mmp[next] = coun;

               if(next == y)
               {
                   bo = 1;
                   cou = coun;
//                   cout << "lawra node = " << node<< endl;//                   for(int i = 0 ; i < mmv[y][coun].size(); ++i)//                   cout << endl;//                   cout << "last = " << next << ",,,,,--- " << cou << endl;//                    cout << mmv[y][coun][i] << " ";
                   break;
               }
               que.push(next);
           }
       }
   }
}

int main()
{
    int t;
    while(cin >> t)
    {
        int tt = t;
        while(t--)
        {
            string str;
            cin >> str;
            int c = 0, g;
            for(int i = 0; str[i] != '-'; ++i)
                c = (c*10) + (str[i] - '0'), g = i;
            for(int i = g+2; i < str.size(); ++i)
            {
                int gg = 0;
                for(int j = i; str[j] != ',' && j < str.size(); ++j)
                {
                    gg = (gg * 10) + (str[j] - '0');
                    i = j + 1;
                }
                vec[c].push_back(gg);
            }

        }
        for(int i = 1; i <= tt; ++i)
            sort(vec[i].begin(), vec[i].end());

        int t1;
        cin >> t1;
        bool bb = 0;
        while(t1--)
        {
            bo = 0;
            int a, b;
            cin >> a >> b;
            bo = 0;
            coun = 1;
            bfs(a,b);

            if(!bb)cout << "-----" << endl;
            bb = 1;
            if(bo)
            {
                for(int i = 0;i < mmv[b][cou].size(); ++i){
                    cout << mmv[b][cou][i];
                    if(i != mmv[b][cou].size()-1)
                        cout << " ";
                }
                cout << endl;
            }
            else
                cout << "connection impossible\n";
            memset(vis,0,sizeof(vis));
            memset(dis,0,sizeof(dis));
            mmv.clear();
            mmp.clear();

        }
        for(int i = 1; i <= tt; ++i)
            vec[i].clear();
    }
    return 0;
}
