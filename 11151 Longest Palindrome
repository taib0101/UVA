#include<bits/stdc++.h>
using namespace std;

int lps(string x) // O(n^2) // from geeks for geeks
{
    int n = x.size();
//    int dp[1000][100];
    map < pair < int , int > , int > dp;
//    memset(dp,0,sizeof(dp));
    for(int i = 0; i < n; ++i)
        dp[{i,i}] = 1;
    for(int cl = 2; cl <= n; ++cl)
    {
        for(int i = 0; i <= n-cl; ++i)
        {
            int j = cl + i - 1;
            if(x[i] == x[j] && cl == 2)
                dp[{i,j}] = 2;
            else if(x[i] == x[j])
                dp[{i,j}] = dp[{i+1,j-1}] + 2;
            else
                dp[{i,j}] = max(dp[{i,j-1}],dp[{i+1,j}]);
        }
    }
    return dp[{0,n-1}];
}

int main()
{
    int t;
    cin >> t;
    string x;
    getline(cin,x);
    while(t--)
    {
        getline(cin,x);
        cout << lps(x) << endl;
    }
    return 0;
}
..................................................
eita wrong answer aise


#include<bits/stdc++.h>
using namespace std;

int lps(string x)
{
    int n = x.size();
    int dp[n+1];
    memset(dp,0,sizeof(dp));
    for(int i = n-1; i >= 0; --i)
    {
        int bckup = 0;
        for(int j = i; j < n; ++j)
        {
            if(i == j)
                dp[j] = 1;
            else if(x[i] == x[j])
            {
                int temp = dp[j];
                dp[j] = bckup + 2;
                bckup = temp;
            }
            else
            {
                bckup = dp[j];
                dp[j] = max(dp[j-1],dp[j]);
            }
        }
    }
    return dp[n-1];
}

int main()
{
    int t;
    cin >> t;
    string x;
    getline(cin,x);
    while(t--)
    {
        getline(cin,x);
        cout << lps(x) << endl;
    }
    return 0;
}
