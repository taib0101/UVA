#include<bits/stdc++.h>
using namespace std;
vector < string > make(string x)
{
     string gg;
     vector < string > xx;
     int sz = x.size();
     for(int i = 0; i < sz; ++i)
     {
         if(isalpha(x[i]) || (x[i] >= '0' && x[i] <= '9'))
            gg.push_back(x[i]);
         else
         {
             if(!gg.empty())
                xx.push_back(gg);
             gg.clear();
         }
     }
     if(!gg.empty())
        xx.push_back(gg);
    return xx;
}
int main()
{
//    freopen("input.txt","r",stdin);
//    freopen("output.txt","w",stdout);
    string x, y;
    int k = 1;
    while(getline(cin,x))
    {
        getline(cin,y);
        printf("%2d.",k);
        if(x.empty() || y.empty())
            cout << " Blank!" << endl;
        else
        {
            string a[1010], b[1010];
            int aa, bb;
            vector < string > xx = make(x);
            for(int i = 1; i <= xx.size(); ++i)
                a[i] = xx[i-1], aa = i;
            xx = make(y);
            for(int i = 1; i <= xx.size(); ++i)
                b[i] = xx[i-1], bb = i;
            int dp[aa+10][bb+10], get = 0;
            memset(dp,0,sizeof(dp));
            for(int i = 1; i <= aa; ++i)
            {
                for(int j = 1; j <= bb; ++j)//lcs dp itaretive formula
                {
                    if(a[i] == b[j])
                        dp[i][j] = dp[i-1][j-1] + 1;
                    else
                        dp[i][j] = max(dp[i][j-1],dp[i-1][j]);
                    get = dp[i][j];
                }
            }
            printf(" Length of longest match: %d\n",get);
        }
        k++;
    }
    return 0;
}
