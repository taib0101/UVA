// In the name of Allah , the entirely Mercifull , the specially mercifull
// second mst
#include<bits/stdc++.h>
using namespace std;
struct node
{
    int uu;
    int vv;
    int cc;
};
bool cmp(struct node x,struct node y)
{
    return x.cc < y.cc;
}
int findd(int u,int *pr)
{
    if(pr[u] == u)
        return u;
    return findd(pr[u],pr);
}
int make_union(vector < node > vn,int pr[],int rk[],int n)
{
    int sum = 0, count = 0;
    vector < int > visited_index;
    if(n == 1)
    {
        cout << "No second way" << endl;
        return -1;
    }
    for(int i = 0; i < vn.size(); ++i)
    {
        int u = findd(vn[i].uu,pr);
        int v = findd(vn[i].vv,pr);
        if(u != v)
        {
            if(rk[u] > rk[v])
                pr[v] = u;
            else if(rk[u] < rk[v])
                pr[u] = v;
            else
            {
                pr[v] = u;
                rk[u]++;
            }
            sum += vn[i].cc;
            count++;
            visited_index.push_back(i);
            if(count == n-1)
                break;
        }
    }
    int minn = 100000;
    if(count != n - 1)
    {
        cout << "No way" << endl;
        return -1;
    }
    else
    {
        for(int i = 0; i < visited_index.size(); ++i)
        {
            sum = count = 0;
            for(int j = 1; j <= n; ++j)
                pr[j] = j,rk[j] = 0;
            for(int j = 0; j < vn.size(); ++j)
            {
                if(visited_index[i] != j)
                {
                    int u = findd(vn[j].uu,pr);
                    int v = findd(vn[j].vv,pr);
                    if(u != v)
                    {
                        if(rk[u] > rk[v])
                            pr[v] = u;
                        else if(rk[u] < rk[v])
                            pr[u] = v;
                        else
                        {
                            pr[v] = u;
                            rk[u]++;
                        }
                        count++;
                        sum += vn[j].cc;
                        if(count == n-1)
                            break;
                    }
                }
            }
            if(count == n-1)
            {
                minn = min(minn,sum);
                //cout << "summ = " << sum << endl;
            }
        }
    }
    if(minn == 100000)
    {
        cout << "No second way" << endl;
        return -1;
    }
    return minn;
}
int main()
{
    // freopen("in.txt","r",stdin);
    // freopen("out.txt","w",stdout);
    int t, co = 1;
    cin >> t;
    while(t--)
    {
        int n, m;
        cin >> n >> m;
        vector < node > vn;
        for(int i = 0; i < m; ++i)
        {
            int u, v, c;
            cin >> u >> v >> c;
            vn.push_back({u,v,c});
        }
        int pr[1000], rk[1000];
        for(int i = 1; i <= 100; ++i)
        {
            pr[i] = i;
            rk[i] = 0;
        }
        sort(vn.begin(),vn.end(),cmp);
        printf("Case #%d : ",co);
        co++;
        int minn = make_union(vn,pr,rk,n);
        if(minn != -1)
            cout << minn << endl;
    }
    return 0;
}
