***         Allahu Akbar      *****
      *** Alhamdulillah ***
#include<bits/stdc++.h>
using namespace std;
const int N = 150;
vector < int > make(string str)
{
    stringstream ss(str);
    int n;
    vector < int > s;
    while(ss >> n)
        s.push_back(n);
    return s;
}
struct node
{
    int lift;
    int prev_lift;
    int floor;
    int cost_floor;
};
class cmp
{
    public:
        bool operator()(node x,node y)
        {
            return x.cost_floor > y.cost_floor;
        }
};
bool bd;
int dijkstra(bool connect[N][N],vector < int > s[],int time[],int first,int k)
{
    int inf = 100000000;
    int d[7][102];
    fill(d[0],d[0]+7*102,inf);
    priority_queue < node , vector < node > ,cmp > p;
    d[first][0] = 0;
    p.push({first,first,0,0});
    int kk = inf;
    if(k == 0)
    {
        bd = 1;
        return 0;
    }
    while(!p.empty())
    {
        int l = p.top().lift;
        int f = p.top().floor;
        int pl = p.top().prev_lift;
        p.pop();
        bool b = 1;
        for(int i = 0; i < s[l].size(); ++i)
        {
            int next = s[l][i];
            int sum = abs(next-f) * time[l];
            if(next != k)
                sum += 60;
            //printf("d[%d][%d] = %d\n",pl,f,d[pl][f]);
            //printf("lift =  %d,prev_lif = %d,floor = %d ,sum = %d,d[%d][%d] = %d,next = %d\n",l,pl,f,sum,pl,f,d[pl][f],next);
            if(d[pl][f] + sum < d[l][next])
            {
                d[l][next] = sum + d[pl][f];
                //cout << "sum = " << d[l][next] << endl;
                if(connect[1][next] && l != 1)
                    p.push({1,l,next,d[l][next]});
                if(connect[2][next] && l != 2)
                    p.push({2,l,next,d[l][next]});
                if(connect[3][next] && l != 3)
                    p.push({3,l,next,d[l][next]});
                if(connect[4][next] && l != 4)
                    p.push({4,l,next,d[l][next]});
                if(connect[5][next] && l != 5)
                    p.push({5,l,next,d[l][next]});
                if(next == k)
                {
                    kk = min(kk,d[l][next]);
                    //cout <<"dis = " << kk << endl;
                    bd = 1;
                    b = 0;
                }
            }
            
        }
    }
    return kk;
}
int main()
{
    // freopen("in.txt","r",stdin);
    // freopen("out.txt","w",stdout);
    int n, k;
    while(cin >> n >> k)
    {
        //cout << "ii = " << ii << endl;
        int t[n+10];
        for(int i = 1; i <= n; ++i)
            cin >> t[i];
        vector < vector < int > > s;
        string str;
        getline(cin,str);
        for(int i = 0; i < n; ++i)
        {
            getline(cin,str);
            s.push_back(make(str));
        }
        // for connetct lift with floor
        vector < int > ss[7];
        // array
        bool connect[N][N];
        memset(connect,0,sizeof(connect));
        int first = -1, b = 1;
        for(int i = 0; i < s.size(); ++i)
        {
            //cout << "main = " << s[i].size() << endl << endl;
            for(int j = 0; j < s[i].size(); ++j)
            {
                if(s[i][j] == 0 && b == 1)
                    first = i+1, b = 0;
                //cout << s[i][j] << endl;
                ss[i+1].push_back(s[i][j]);
                connect[i+1][s[i][j]] = 1;
            }
        }
        bd = 0;
        //dijkstra calling
        int val = 1000000000;
        for(int i = 1; i <= n; ++i)
        {
            //cout << "i = " << i << endl;
            if(s[i-1][0] == 0)
                val = min(val,dijkstra(connect,ss,t,i,k));
        }
        if(!bd)
            cout << "IMPOSSIBLE" << endl;
        else
            cout << val << endl;
    }
    return 0;
}
