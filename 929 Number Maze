#include<bits/stdc++.h>
using namespace std;
int inf = 1000000000;
struct node
{
    int x;
    int y;
    int cost_dis;
};
class cmp
{
    public:
        bool operator()(node a, node b)
        {
            return a.cost_dis > b.cost_dis;
        }
};
int dijkstra_grid(int n,int m)
{
    int cost[n+1][m+1];
    int d[n+1][m+1];
    bool vis[n+1][m+1];
    memset(vis,0,sizeof(vis));
    for(int i = 0;i < n; ++i)
    {
        for(int j = 0; j < m; ++j)
        {
            cin >> cost[i][j];
            d[i][j] = inf;
        }
            
    }
    priority_queue < node , vector < node > , cmp > p;
    int dx[] = {0,1,0,-1};
    int dy[] = {1,0,-1,0};
    p.push({0,0,0});
    d[0][0] = cost[0][0];
    int z = d[0][0];
    while(!p.empty())
    {
        int x1 = p.top().x;
        int y1 = p.top().y;
        p.pop();
        for(int i = 0; i < 4 && !vis[x1][y1]; ++i)
        {
            int x2 = x1 + dx[i];
            int y2 = y1 + dy[i];
            if(x2 != -1 && y2 != -1 && x2 != n && y2 != m)
            {
                if(d[x1][y1] + cost[x2][y2] < d[x2][y2])
                    d[x2][y2] = d[x1][y1] + cost[x2][y2], p.push({x2,y2,d[x2][y2]});
                if(x2 == n-1 && y2 == m-1)
                    z = d[x2][y2];
            }
            
        }
        vis[x1][y1] = 1;
    }
    return z;
}

int main()
{
    // freopen("in.txt","r",stdin);
    // freopen("out.txt","w",stdout);
    int t;
    cin >> t;
    while(t--)
    {
        int n, m;
        cin >> n >> m;
        cout << dijkstra_grid(n,m) << endl;
    }
    return 0;
}
